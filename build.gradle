apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

mainClassName = 'hello.HelloWorld'

// tag::repositories[]
repositories {
  Closure<Properties> loadProps = { ->
        def props = new Properties()
        /**
        * that is just a quick fix ...
        * FIXME: find a way to get either a handle to the rootProject (not available here) or pass the actual file via extensions ... but as far as i know
        * the extension thingy is actually meant to be used the other way around ...
        */
        def localPropsPath = ["local.properties","../local.properties","../../local.properties","../../../local.properties"].find { file("${it}").exists() }
        if(localPropsPath != null){
        file(localPropsPath).withInputStream { itf ->
                props.load(itf)
            }
        }else{
            throw new RuntimeException("Could not find local.properties")
        }
        def foo = System.env.BUILD_USING_PROXY?:"false"
        props.setProperty('BUILD_USING_PROXY', foo )
        return props
    }
    def props = loadProps()
    maven{
        credentials {
            username = props.getProperty("jfrogUsername")
            password = props.getProperty("jfrogPassword")
        }
        url "https://medneo.jfrog.io/medneo/medneo-mvn-virtual-repo/"
    }
}
// end::repositories[]

// tag::jar[]
jar {
    baseName = 'gs-gradle'
    version =  '0.1.0'
}
// end::jar[]

// tag::dependencies[]
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "joda-time:joda-time:2.2"
    testCompile "junit:junit:4.12"

}
// end::dependencies[]

// tag::wrapper[]
// end::wrapper[]